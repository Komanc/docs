Explorer: Data Retrieval And Manipulation
*****************************************


Data Retrieval
==============

Pro čtení dat z databáze máme k dispozici několik užitečných metod:

.[language-php]
| `foreach ($table as $key => $row)` | Iteruje přes všechny řádky, `$key` je hodnota primárního klíče, `$row` je objekt ActiveRow
| `$row = $table->get($key)` | Vrátí jeden řádek podle primárního klíče
| `$row = $table->fetch()` | Vrátí aktuální řádek a posune ukazatel na další
| `$array = $table->fetchPairs()` | Vytvoří asociativní pole z výsledků
| `$array = $table->fetchAll()` | Vráti všechny řádky jako pole
| `count($table)` | Vrátí počet řádků v objektu Selection

Objekt [ActiveRow |api:Nette\Database\Table\ActiveRow] je určen pouze pro čtení. To znamená, že nelze měnit hodnoty jeho properties. Toto omezení zajišťuje konzistenci dat a zabraňuje neočekávaným vedlejším efektům. Data se načítají z databáze a jakákoliv změna by měla být provedena explicitně a kontrolovaně.


`foreach` - iterace přes všechny řádky
--------------------------------------

Nejsnazší způsob, jak vykonat dotaz a získat řádky, je iterováním v cyklu `foreach`. Automaticky spouští SQL dotaz.

```php
$books = $explorer->table('book');
foreach ($books as $key => $book) {
	// $key je hodnota primárního klíče, $book je ActiveRow
	echo "$book->title ({$book->author->name})";
}
```


get($key): ?ActiveRow .[method]
-------------------------------

Vykoná SQL dotaz a vrátí řádek podle primárního klíče, nebo `null`, pokud neexistuje.

```php
$book = $explorer->table('book')->get(123);  // vrátí ActiveRow s ID 123 nebo null
if ($book) {
	echo $book->title;
}
```


fetch(): ?ActiveRow .[method]
-----------------------------

Vrací jeden řádek a posune interní ukazatel na další. Pokud už neexistují další řádky, vrací `null`.

```php
$books = $explorer->table('book');
while ($book = $books->fetch()) {
	$this->processBook($book);
}
```


fetchPairs(): array .[method]
-----------------------------

Vrátí výsledky jako asociativní pole. První argument určuje název sloupce, který se použije jako klíč v poli, druhý argument určuje název sloupce, který se použije jako hodnota:

```php
$authors = $explorer->table('author')->fetchPairs('id', 'name');
// [1 => 'John Doe', 2 => 'Jane Doe', ...]
```

Pokud je zadán pouze název sloupce pro klíč, bude hodnotou celý řadek, tedy objekt `ActiveRow`:

```php
$authors = $explorer->table('author')->fetchPairs('id');
// [1 => ActiveRow(id: 1, ...), 2 => ActiveRow(id: 2, ...), ...]
```

Pokud jako klíč uvedeme `null`, bude pole indexováno numericky od nuly:

```php
$authors = $explorer->table('author')->fetchPairs(null, 'name');
// [0 => 'John Doe', 1 => 'Jane Doe', ...]
```

Jako parametr můžeme také uvést callback, který bude pro každý řádek vracet buď samotnou hodnotu, nebo dvojici klíč-hodnota. Pokud callback vrací pouze hodnotu, klíčem bude primární klíč řádku:

```php
$titles = $explorer->table('book')
	->fetchPairs(fn($row) => "$row->title ({$row->author->name})");
// [1 => 'První kniha (Jan Novák)', ...]

// Callback může také vracet pole s dvojicí klíč & hodnota:
$titles = $explorer->table('book')
	->fetchPairs(fn($row) => [$row->title, $row->author->name]);
// ['První kniha' => 'Jan Novák', ...]
```


fetchAll(): array .[method]
---------------------------

Vrátí všechny řádky jako asociativní pole objektů `ActiveRow`, kde klíče jsou hodnoty primárních klíčů.

```php
$allBooks = $explorer->table('book')->fetchAll();
// [1 => ActiveRow(id: 1, ...), 2 => ActiveRow(id: 2, ...), ...]
```


count(): int .[method]
----------------------

Metoda `count()` bez parametru vrací počet řádků v objektu `Selection`:

```php
$table->where('category', 1);
$count = $table->count();
$count = count($table); // alternativa
```

Pozor, `count()` s parametrem provádí agregační funkci COUNT v databázi, viz níže.


ActiveRow::toArray(): array .[method]
-------------------------------------

Převede objekt `ActiveRow` na asociativní pole, kde klíče jsou názvy sloupců a hodnoty jsou odpovídající data.

```php
$book = $explorer->table('book')->get(1);
$bookArray = $book->toArray();
// $bookArray bude ['id' => 1, 'title' => '...', 'author_id' => ..., ...]
```


Agregace
========

Třída `Selection` poskytuje metody pro snadné provádění agregačních funkcí (COUNT, SUM, MIN, MAX, AVG atd.).

.[language-php]
| `count($expr)` | Spočítá počet řádků
| `min($expr)` | Vrátí minimální hodnotu ve sloupci
| `max($expr)` | Vrátí maximální hodnotu ve sloupci
| `sum($expr)` | Vrátí součet hodnot ve sloupci
| `aggregation($function)` | Umožňuje provést libovolnou agregační funkci. Např. `AVG()`, `GROUP_CONCAT()`


count(string $expr): int .[method]
----------------------------------

Provede SQL dotaz s funkcí COUNT a vrátí výsledek. Metoda se používá k zjištění, kolik řádků odpovídá určité podmínce:

```php
$count = $table->count('*');                 // SELECT COUNT(*) FROM `table`
$count = $table->count('DISTINCT column');   // SELECT COUNT(DISTINCT `column`) FROM `table`
```

Pozor, [#count()] bez parametru pouze vrací počet řádků v objektu `Selection`.


min(string $expr) a max(string $expr) .[method]
-----------------------------------------------

Metody `min()` a `max()` vrací minimální a maximální hodnotu ve specifikovaném sloupci nebo výrazu:

```php
// SELECT MAX(`price`) FROM `products` WHERE `active` = 1
$maxPrice = $products->where('active', true)
	->max('price');
```


sum(string $expr) .[method]
---------------------------

Vrací součet hodnot ve specifikovaném sloupci nebo výrazu:

```php
// SELECT SUM(`price` * `items_in_stock`) FROM `products` WHERE `active` = 1
$totalPrice = $products->where('active', true)
	->sum('price * items_in_stock');
```


aggregation(string $function, ?string $groupFunction = null) .[method]
----------------------------------------------------------------------

Umožňuje provést libovolnou agregační funkci.

```php
// průměrná cena produktů v kategorii
$avgPrice = $products->where('category_id', 1)
	->aggregation('AVG(price)');

// spojí štítky produktu do jednoho řetězce
$tags = $products->where('id', 1)
	->aggregation('GROUP_CONCAT(tag.name) AS tags')
	->fetch()
	->tags;
```

Pokud potřebujeme agregovat výsledky, které už samy o sobě vzešly z nějaké agregační funkce a seskupení (např. `SUM(hodnota)` přes seskupené řádky), jako druhý argument uvedeme agregační funkci, která se má na tyto mezivýsledky aplikovat:

```php
// Vypočítá celkovou cenu produktů na skladě pro jednotlivé kategorie a poté sečte tyto ceny dohromady.
$totalPrice = $products->select('category_id, SUM(price * stock) AS category_total')
	->group('category_id')
	->aggregation('SUM(category_total)', 'SUM');
```

V tomto příkladu nejprve vypočítáme celkovou cenu produktů v každé kategorii (`SUM(price * stock) AS category_total`) a seskupíme výsledky podle `category_id`. Poté použijeme `aggregation('SUM(category_total)', 'SUM')` k sečtení těchto mezisoučtů `category_total`. Druhý argument `'SUM'` říká, že se má na mezivýsledky aplikovat funkce SUM.


Insert, Update & Delete
=======================

Nette Database Explorer zjednodušuje vkládání, aktualizaci a mazání dat. Všechny uvedené metody v případě vyhodí výjimku `Nette\Database\DriverException`.


Selection::insert(iterable $data) .[method]
-------------------------------------------

Vloží nové záznamy do tabulky.

**Vkládání jednoho záznamu:**

Nový záznam předáme jako asociativní pole nebo iterable objekt (například ArrayHash používaný ve [formulářích |forms:]), kde klíče odpovídají názvům sloupců v tabulce.

Pokud má tabulka definovaný primární klíč, metoda vrací objekt `ActiveRow`, který se znovunačte z databáze, aby se zohlednily případné změny provedené na úrovni databáze (triggery, výchozí hodnoty sloupců, výpočty auto-increment sloupců). Tím je zajištěna konzistence dat a objekt vždy obsahuje aktuální data z databáze. Pokud jednoznačný primární klíč nemá, vrací předaná data ve formě pole.

```php
$row = $explorer->table('users')->insert([
	'name' => 'John Doe',
	'email' => 'john.doe@example.com',
]);
// $row je instance ActiveRow a obsahuje kompletní data vloženého řádku,
// včetně automaticky generovaného ID a případných změn provedených triggery
echo $row->id; // Vypíše ID nově vloženého uživatele
echo $row->created_at; // Vypíše čas vytvoření, pokud je nastaven triggerem
```

**Vkládání více záznamů najednou:**

Metoda `insert()` umožňuje vložit více záznamů pomocí jednoho SQL dotazu. V tomto případě vrací počet vložených řádků.

```php
$insertedRows = $explorer->table('users')->insert([
	[
		'name' => 'John',
		'year' => 1994,
	],
	[
		'name' => 'Jack',
		'year' => 1995,
	],
]);
// INSERT INTO `users` (`name`, `year`) VALUES ('John', 1994), ('Jack', 1995)
// $insertedRows bude 2
```

Jako parametr lze také předat objekt `Selection` s výběrem dat.

```php
$newUsers = $explorer->table('potential_users')
	->where('approved', 1)
	->select('name, email');

$insertedRows = $explorer->table('users')->insert($newUsers);
```

**Vkládání speciálních hodnot:**

Jako hodnoty můžeme předávat i soubory, objekty DateTime nebo SQL literály:

```php
$explorer->table('users')->insert([
	'name' => 'John',
	'created_at' => new DateTime,           // převede na databázový formát
	'avatar' => fopen('image.jpg', 'rb'),   // vloží binární obsah souboru
	'uuid' => $explorer::literal('UUID()'), // zavolá funkci UUID()
]);
```


Selection::update(iterable $data): int .[method]
------------------------------------------------

Aktualizuje řádky v tabulce podle zadaného filtru. Vrací počet skutečně změněných řádků.

Měněné sloupce předáme jako asociativní pole nebo iterable objekt (například ArrayHash používaný ve [formulářích |forms:]), kde klíče odpovídají názvům sloupců v tabulce:

```php
$affected = $explorer->table('users')
	->where('id', 10)
	->update([
		'name' => 'John Smith',
		'year' => 1994,
	]);
// UPDATE `users` SET `name` = 'John Smith', `year` = 1994 WHERE `id` = 10
```

Pro změnu číselných hodnot můžeme použít operátory `+=` a `-=`:

```php
$explorer->table('users')
	->where('id', 10)
	->update([
		'points+=' => 1,  // zvýší hodnotu sloupce 'points' o 1
		'coins-=' => 1,   // sníží hodnotu sloupce 'coins' o 1
	]);
// UPDATE `users` SET `points` = `points` + 1, `coins` = `coins` - 1 WHERE `id` = 10
```


Selection::delete(): int .[method]
----------------------------------

Maže řádky z tabulky podle zadaného filtru. Vrací počet smazaných řádků.

```php
$count = $explorer->table('users')
	->where('id', 10)
	->delete();
// DELETE FROM `users` WHERE `id` = 10
```

.[caution]
Při volání `update()` a `delete()` nezapomeňte pomocí `where()` specifikovat řádky, které se mají upravit/smazat. Pokud `where()` nepoužijete, operace se provede na celé tabulce!


ActiveRow::update(iterable $data): bool .[method]
-------------------------------------------------

Aktualizuje data v databázovém řádku reprezentovaném objektem `ActiveRow`. Jako parametr přijímá iterable s daty, která se mají aktualizovat (klíče jsou názvy sloupců). Pro změnu číselných hodnot můžeme použít operátory `+=` a `-=`:

Po provedení aktualizace se `ActiveRow` automaticky znovu načte z databáze, aby se zohlednily případné změny provedené na úrovni databáze (např. triggery). Metoda vrací true pouze pokud došlo ke skutečné změně dat.

```php
$article = $explorer->table('article')->get(1);
$article->update([
	'views += 1',  // zvýšíme počet zobrazení
]);
echo $article->views; // Vypíše aktuální počet zobrazení
```

Tato metoda aktualizuje pouze jeden konkrétní řádek v databázi. Pro hromadnou aktualizaci více řádků použijte metodu [#Selection::update()].


ActiveRow::delete() .[method]
-----------------------------

Smaže řádek z databáze, který je reprezentován objektem `ActiveRow`.

```php
$book = $explorer->table('book')->get(1);
$book->delete(); // Smaže knihu s ID 1
```

Tato metoda maže pouze jeden konkrétní řádek v databázi. Pro hromadné smazání více řádků použijte metodu [#Selection::delete()].
